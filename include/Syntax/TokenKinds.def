#ifndef TOK
#define TOK(X) _##X
#endif
#ifndef PUNCTUATOR
#define PUNCTUATOR(X, Y) TOK(X)
#endif
#ifndef OPERATOR
#define OPERATOR(X, Y) PUNCTUATOR(X, Y)
#endif
#ifndef KEYWORD
#define KEYWORD(X, Y) TOK(_KW_ ## X)
#endif

TOK(UNKNOWN) // Not a token
TOK(EOF)     // End of file

// IEEE Std 1800-2017
// 5.1 General
// This clause describes the following:
// — Lexical tokens (white space, comments, operators)
// — Integer, real, string, array, structure, and time literals
// — Built-in method calls
// — Attributes

// 5.6 Identifiers, keywords, and system names
TOK(IDENTIFIER)

// 5.6.1 Escaped identifiers
TOK(ESCAPED_IDENTIFIER)

// 5.6.3 System tasks and system functions
TOK(SYSTEM_TF_IDENTIFIER)

// 5.7.1 Integer literal constants
TOK(INTEGER_LITERAL)
TOK(INTEGER_BASE)
TOK(UNBASED_UNSIZED_LITERAL)

// 5.7.2 Real literal constants
TOK(REAL_LITERAL)

// 5.8 Time literals
TOK(TIME_LITERAL)

// 5.9 String literals
TOK(STRING_LITERAL)

// 5.3 White space
// ignored

// 5.4 Comments
// ignored

// 5.5 Operators
// Table 11-1—Operators and data types
// Binary assignment operator
OPERATOR(EQUAL,"=")

// Binary arithmetic assignment operators
OPERATOR(PLUS_EQUAL , "+=")
OPERATOR(MINUS_EQUAL, "-=")
OPERATOR(SLASH_EQUAL, "/=")
OPERATOR(STAR_EQUAL , "*=")

// Binary arithmetic modulus assignment operator
OPERATOR(PERCENT_EQUAL, "%=")

// Binary bitwise assignment operators
OPERATOR(AMP_EQUAL  , "&=")
OPERATOR(PIPE_EQUAL , "|=")
OPERATOR(CARET_EQUAL, "^=")

// Binary logical shift assignment operators
OPERATOR(GREATER_GREATER_EQUAL, ">>=")
OPERATOR(LESS_LESS_EQUAL      , "<<=")

// Binary arithmetic shift assignment operators
OPERATOR(GREATER_GREATER_GREATER_EQUAL, ">>>=")
OPERATOR(LESS_LESS_LESS_EQUAL         , "<<<=")

// Conditional operator
PUNCTUATOR(QUESTION, "?")
PUNCTUATOR(COLON   , ":")

// Unary arithmetic operators
OPERATOR(PLUS, "+")
OPERATOR(MINUS, "-")

// Unary logical negation operator
OPERATOR(EXCLAIM, "!")

// Unary logical reduction operators
OPERATOR(TILDE      , "~")
OPERATOR(AMP        , "&")
OPERATOR(TILDE_AMP  , "~&")
OPERATOR(PIPE       , "|")
OPERATOR(TILDE_PIPE , "~|")
OPERATOR(CARET      , "^")
OPERATOR(TILDE_CARET, "~^")
OPERATOR(CARET_TILDE, "^~")

// Binary arithmetic operators
// OPERATOR(PLUS     , "+")
// OPERATOR(MINUS    , "-")
OPERATOR(STAR     , "*")
OPERATOR(SLASH    , "/")
OPERATOR(STAR_STAR, "**")

// Binary arithmetic modulus operator
OPERATOR(PERCENT, "%")

// Binary bitwise operators
// OPERATOR(AMP        , "&" )
// OPERATOR(PIPE       , "|" )
// OPERATOR(CARET      , "^" )
// OPERATOR(CARET_TILDE, "^~")
// OPERATOR(TILDE_CARET, "~^")

// Binary logical shift operators
OPERATOR(GREATER_GREATER, ">>")
OPERATOR(LESS_LESS      , "<<")

// Binary arithmetic shift operators
OPERATOR(GREATER_GREATER_GREATER, ">>>")
OPERATOR(LESS_LESS_LESS         , "<<<")

// Binary logical operators
OPERATOR(AMP_AMP           , "&&")
OPERATOR(PIPE_PIPE         , "||")
OPERATOR(ARROW             , "->")
OPERATOR(LESS_MINUS_GREATER, "<->")

// Binary relational operators
OPERATOR(LESS         , "<")
OPERATOR(LESS_EQUAL   , "<=")
OPERATOR(GREATER      , ">")
OPERATOR(GREATER_EQUAL, ">=")

// Binary case equality operators
OPERATOR(EQUAL_EQUAL_EQUAL  , "===")
OPERATOR(EXCLAIM_EQUAL_EQUAL, "!==")


// Binary, logical equality operators
OPERATOR(EQUAL_EQUAL  , "==")
OPERATOR(EXCLAIM_EQUAL, "!=")

// Binary, wildcard equality operators
OPERATOR(EQUAL_EQUAL_QUESTION  , "==?")
OPERATOR(EXCLAIM_EQUAL_QUESTION, "!=?")


// Unary ,increment, decrement operators
OPERATOR(PLUS_PLUS  , "++")
OPERATOR(MINUS_MINUS, "--")

// Stream, operators
// OPERATOR(GREATER_GREATER, ">>")
// OPERATOR(LESS_LESS      , "<<")

// 5.10 Structure literals

OPERATOR(STAR_GREATER, "*>" )
OPERATOR(AMP_AMP_AMP , "&&&")

/*
 * Others
 * */
OPERATOR(MINUS_GREATER_GREATER, "->>")
OPERATOR(PIPE_MINUS_GREATER, "|->")
OPERATOR(PIPE_EQUAL_GREATER, "|=>")

// Vector bit-select operator
OPERATOR(PLUS_COLON  , "+:" )
OPERATOR(MINUS_COLON , "-:" )

// 18.5.4 Distribution
OPERATOR(COLON_EQUAL, ":=")
OPERATOR(COLON_SLASH, ":/")

// 8.23 Class scope resolution operator ::
OPERATOR(COLON_COLON, "::")

// Others non-operator
PUNCTUATOR(L_SQUARE  , "[" )
PUNCTUATOR(R_SQUARE  , "]" )
PUNCTUATOR(L_PAREN   , "(" )
PUNCTUATOR(R_PAREN   , ")" )
PUNCTUATOR(L_BRACE   , "{" )
PUNCTUATOR(R_BRACE   , "}" )
PUNCTUATOR(PERIOD    , "." )
PUNCTUATOR(COMMA     , "," )
PUNCTUATOR(HASH      , "#" )
PUNCTUATOR(BACKQUOTE , "`" )
PUNCTUATOR(APOSTROPHE, "'" )
PUNCTUATOR(L_PAREN_STAR, "(*")
PUNCTUATOR(STAR_R_PAREN, "*)")
PUNCTUATOR(APOSTROPHE_L_BRACE, "'{")
PUNCTUATOR(AT   , "@")
PUNCTUATOR(AT_AT, "@@")

#undef KEYWORD
#undef OPERATOR
#undef PUNCTUATOR
#undef TOK
